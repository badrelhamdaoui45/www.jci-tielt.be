///**
// * Created by jonas on 16/04/15.
// */
//if (typeof jQuery == "undefined") {
//    throw new Error("jQuery is not loaded")
//}
//$.fn.zabuto_calendar = function(b) {
//    var c = $.extend({}, $.fn.zabuto_calendar_defaults(), b);
//    var a = $.fn.zabuto_calendar_language(c.language);
//    c = $.extend({}, c, a);
//    this.each(function() {
//        var j = $(this);
//        j.attr("id", "zabuto_calendar_" + Math.floor(Math.random() * 99999).toString(36));
//        j.data("initYear", c.year);
//        j.data("initMonth", c.month);
//        j.data("monthLabels", c.month_labels);
//        j.data("weekStartsOn", c.weekstartson);
//        j.data("navIcons", c.nav_icon);
//        j.data("dowLabels", c.dow_labels);
//        j.data("showToday", c.today);
//        j.data("showDays", c.show_days);
//        j.data("showPrevious", c.show_previous);
//        j.data("showNext", c.show_next);
//        j.data("cellBorder", c.cell_border);
//        j.data("jsonData", c.data);
//        j.data("ajaxSettings", c.ajax);
//        j.data("legendList", c.legend);
//        j.data("actionFunction", c.action);
//        j.data("actionNavFunction", c.action_nav);
//        l();
//
//        function l() {
//            var y = parseInt(j.data("initYear"));
//            var B = parseInt(j.data("initMonth")) - 1;
//            var C = new Date(y, B, 1, 0, 0, 0, 0);
//            j.data("initDate", C);
//            var D = (j.data("cellBorder") === true) ? " table-bordered" : "";
//            $tableObj = $('<table class="table' + D + '"></table>');
//            $tableObj = w(j, $tableObj, C.getFullYear(), C.getMonth());
//            $legendObj = g(j);
//            var z = $('<div class="zabuto_calendar" id="' + j.attr("id") + '"></div>');
//            z.append($tableObj);
//            z.append($legendObj);
//            j.append(z);
//            var A = j.data("jsonData");
//            if (false !== A) {
//                r(j, C.getFullYear(), C.getMonth())
//            }
//        }
//
//        function w(A, C, z, B) {
//            var y = new Date(z, B, 1, 0, 0, 0, 0);
//            A.data("currDate", y);
//            C.empty();
//            C = s(A, C, z, B);
//            C = e(A, C);
//            C = q(A, C, z, B);
//            r(A, z, B);
//            return C
//        }
//
//        function g(A) {
//            var y = $('<div class="legend" id="' + A.attr("id") + '_legend"></div>');
//            var z = A.data("legendList");
//            if (typeof(z) == "object" && z.length > 0) {
//                $(z).each(function(E, G) {
//                    if (typeof(G) == "object") {
//                        if ("type" in G) {
//                            var F = "";
//                            if ("label" in G) {
//                                F = G.label
//                            }
//                            switch (G.type) {
//                                case "text":
//                                    if (F !== "") {
//                                        var D = "";
//                                        if ("badge" in G) {
//                                            if (typeof(G.classname) === "undefined") {
//                                                var H = "badge-event"
//                                            } else {
//                                                var H = G.classname
//                                            }
//                                            D = '<span class="badge ' + H + '">' + G.badge + "</span> "
//                                        }
//                                        y.append('<span class="legend-' + G.type + '">' + D + F + "</span>")
//                                    }
//                                    break;
//                                case "block":
//                                    if (F !== "") {
//                                        F = "<span>" + F + "</span>"
//                                    }
//                                    if (typeof(G.classname) === "undefined") {
//                                        var C = "event"
//                                    } else {
//                                        var C = "event-styled " + G.classname
//                                    }
//                                    y.append('<span class="legend-' + G.type + '"><ul class="legend"><li class="' + C + '"></li></u>' + F + "</span>");
//                                    break;
//                                case "list":
//                                    if ("list" in G && typeof(G.list) == "object" && G.list.length > 0) {
//                                        var B = $('<ul class="legend"></u>');
//                                        $(G.list).each(function(J, I) {
//                                            B.append('<li class="' + I + '"></li>')
//                                        });
//                                        y.append(B)
//                                    }
//                                    break;
//                                case "spacer":
//                                    y.append('<span class="legend-' + G.type + '"> </span>');
//                                    break
//                            }
//                        }
//                    }
//                })
//            }
//            return y
//        }
//
//        function s(N, B, K, I) {
//            var J = N.data("navIcons");
//            var G = $('<span><span class="glyphicon glyphicon-chevron-left"></span></span>');
//            var H = $('<span><span class="glyphicon glyphicon-chevron-right"></span></span>');
//            if (typeof(J) === "object") {
//                if ("prev" in J) {
//                    G.html(J.prev)
//                }
//                if ("next" in J) {
//                    H.html(J.next)
//                }
//            }
//            var M = N.data("showPrevious");
//            if (typeof(M) === "number" || M === false) {
//                M = p(N.data("showPrevious"), true)
//            }
//            var L = $('<div class="calendar-month-navigation"></div>');
//            L.attr("id", N.attr("id") + "_nav-prev");
//            L.data("navigation", "prev");
//            if (M !== false) {
//                prevMonth = (I - 1);
//                prevYear = K;
//                if (prevMonth == -1) {
//                    prevYear = (prevYear - 1);
//                    prevMonth = 11
//                }
//                L.data("to", {
//                    year: prevYear,
//                    month: (prevMonth + 1)
//                });
//                L.append(G);
//                if (typeof(N.data("actionNavFunction")) === "function") {
//                    L.click(N.data("actionNavFunction"))
//                }
//                L.click(function(P) {
//                    w(N, B, prevYear, prevMonth)
//                })
//            }
//            var F = N.data("showNext");
//            if (typeof(F) === "number" || F === false) {
//                F = p(N.data("showNext"), false)
//            }
//            var D = $('<div class="calendar-month-navigation"></div>');
//            D.attr("id", N.attr("id") + "_nav-next");
//            D.data("navigation", "next");
//            if (F !== false) {
//                nextMonth = (I + 1);
//                nextYear = K;
//                if (nextMonth == 12) {
//                    nextYear = (nextYear + 1);
//                    nextMonth = 0
//                }
//                D.data("to", {
//                    year: nextYear,
//                    month: (nextMonth + 1)
//                });
//                D.append(H);
//                if (typeof(N.data("actionNavFunction")) === "function") {
//                    D.click(N.data("actionNavFunction"))
//                }
//                D.click(function(P) {
//                    w(N, B, nextYear, nextMonth)
//                })
//            }
//            var O = N.data("monthLabels");
//            var E = $("<th></th>").append(L);
//            var y = $("<th></th>").append(D);
//            var C = $("<span>" + O[I] + " " + K + "</span>");
//            C.dblclick(function() {
//                var P = N.data("initDate");
//                w(N, B, P.getFullYear(), P.getMonth())
//            });
//            var z = $('<th colspan="5"></th>');
//            z.append(C);
//            var A = $('<tr class="calendar-month-header"></tr>');
//            A.append(E, z, y);
//            B.append(A);
//            return B
//        }
//
//        function e(B, D) {
//            if (B.data("showDays") === true) {
//                var y = B.data("weekStartsOn");
//                var z = B.data("dowLabels");
//                if (y === 0) {
//                    var C = $.extend([], z);
//                    var E = new Array(C.pop());
//                    z = E.concat(C)
//                }
//                var A = $('<tr class="calendar-dow-header"></tr>');
//                $(z).each(function(F, G) {
//                    A.append("<th>" + G + "</th>")
//                });
//                D.append(A)
//            }
//            return D
//        }
//
//        function q(G, F, I, N) {
//            var E = G.data("ajaxSettings");
//            var H = t(I, N);
//            var y = o(I, N);
//            var D = i(I, N, 1);
//            var P = i(I, N, y);
//            var C = 1;
//            var B = G.data("weekStartsOn");
//            if (B === 0) {
//                if (P == 6) {
//                    H++
//                }
//                if (D == 6 && (P == 0 || P == 1 || P == 5)) {
//                    H--
//                }
//                D++;
//                if (D == 7) {
//                    D = 0
//                }
//            }
//            for (var A = 0; A < H; A++) {
//                var z = $('<tr class="calendar-dow"></tr>');
//                for (var K = 0; K < 7; K++) {
//                    if (K < D || C > y) {
//                        z.append("<td></td>")
//                    } else {
//                        var O = G.attr("id") + "_" + k(I, N, C);
//                        var M = O + "_day";
//                        var L = $('<div id="' + M + '" class="day" >' + C + "</div>");
//                        L.data("day", C);
//                        if (G.data("showToday") === true) {
//                            if (x(I, N, C)) {
//                                L.html('<span class="badge badge-today">' + C + "</span>")
//                            }
//                        }
//                        var J = $('<td id="' + O + '"></td>');
//                        J.append(L);
//                        J.data("date", k(I, N, C));
//                        J.data("hasEvent", false);
//                        if (typeof(G.data("actionFunction")) === "function") {
//                            J.addClass("dow-clickable");
//                            J.click(function() {
//                                G.data("selectedDate", $(this).data("date"))
//                            });
//                            J.click(G.data("actionFunction"))
//                        }
//                        z.append(J);
//                        C++
//                    }
//                    if (K == 6) {
//                        D = 0
//                    }
//                }
//                F.append(z)
//            }
//            return F
//        }
//
//        function h(B, H, G, J) {
//            var I = $('<button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>');
//            var A = $('<h4 class="modal-title" id="' + B + '_modal_title">' + H + "</h4>");
//            var K = $('<div class="modal-header"></div>');
//            K.append(I);
//            K.append(A);
//            var F = $('<div class="modal-body" id="' + B + '_modal_body">' + G + "</div>");
//            var E = $('<div class="modal-footer" id="' + B + '_modal_footer"></div>');
//            if (typeof(J) !== "undefined") {
//                var z = $("<div>" + J + "</div>");
//                E.append(z)
//            }
//            var C = $('<div class="modal-content"></div>');
//            C.append(K);
//            C.append(F);
//            C.append(E);
//            var y = $('<div class="modal-dialog"></div>');
//            y.append(C);
//            var D = $('<div class="modal fade" id="' + B + '_modal" tabindex="-1" role="dialog" aria-labelledby="' + B + '_modal_title" aria-hidden="true"></div>');
//            D.append(y);
//            D.data("dateId", B);
//            D.attr("dateId", B);
//            return D
//        }
//
//        function r(A, z, C) {
//            var y = A.data("jsonData");
//            var B = A.data("ajaxSettings");
//            A.data("events", false);
//            if (false !== y) {
//                return n(A)
//            } else {
//                if (false !== B) {
//                    return u(A, z, C)
//                }
//            }
//            return true
//        }
//
//        function n(z) {
//            var y = z.data("jsonData");
//            z.data("events", y);
//            f(z, "json");
//            return true
//        }
//
//        function u(z, y, C) {
//            var B = z.data("ajaxSettings");
//            if (typeof(B) != "object" || typeof(B.url) == "undefined") {
//                alert("Invalid calendar event settings");
//                return false
//            }
//            var A = {
//                year: y,
//                month: (C + 1)
//            };
//            $.ajax({
//                type: "GET",
//                url: B.url,
//                data: A,
//                dataType: "json"
//            }).done(function(D) {
//                var E = [];
//                $.each(D, function(G, F) {
//                    E.push(D[G])
//                });
//                z.data("events", E);
//                f(z, "ajax")
//            });
//            return true
//        }
//
//        function f(B, A) {
//            var z = B.data("jsonData");
//            var C = B.data("ajaxSettings");
//            var y = B.data("events");
//            if (y !== false) {
//                $(y).each(function(H, J) {
//                    var D = B.attr("id") + "_" + J.date;
//                    var F = $("#" + D);
//                    var K = $("#" + D + "_day");
//                    var X = $("#" + D + "_day_1");
//                    F.data("hasEvent", true);
//                    if (typeof(J.title) !== "undefined") {
//                        F.attr("title", J.title)
//                    }
//                    if (typeof(J.classname) === "undefined") {
//                        F.addClass("event")
//                    } else {
//                        F.addClass("event-styled");
//                        K.addClass(J.classname)
//                    }
//                    if (typeof(J.badge) !== "undefined" && J.badge !== false) {
//                        var E = (J.badge === true) ? "" : " badge-" + J.badge;
//                        var G = K.data("day");
//                        //K.html('<span class="badge badge-event' + E + '">' + G + "</span>")
//                        K.html('<span class="btn btn-yellow no-border btn-center' + E + '" style="padding:2px !important; width:38px;">' + G + "</span>")
//                        //if(E.length){
//
//                        //}
//                        //K.append('<span class="badge">1</span>')
//                        //X.html('<span class="btn btn-yellow no-border btn-center' + E + '">' + G + "</span>")
//                        //console.log(E.length);
//                    }
//                    if (typeof(J.body) !== "undefined") {
//                        var I = false;
//                        if (A === "json" && typeof(J.modal) !== "undefined" && J.modal === true) {
//                            I = true
//                        } else {
//                            if (A === "ajax" && "modal" in C && C.modal === true) {
//                                I = true
//                            }
//                        }
//                        if (I === true) {
//                            F.addClass("event-clickable");
//                            var L = h(D, J.title, J.body, J.footer);
//                            $("body").append(L);
//                            $("#" + D).click(function() {
//                                $("#" + D + "_modal").modal()
//                            })
//                        }
//                    }
//                })
//            }
//        }
//
//        function x(A, B, z) {
//            var C = new Date();
//            var y = new Date(A, B, z);
//            return (y.toDateString() == C.toDateString())
//        }
//
//        function k(z, A, y) {
//            d = (y < 10) ? "0" + y : y;
//            m = A + 1;
//            m = (m < 10) ? "0" + m : m;
//            return z + "-" + m + "-" + d
//        }
//
//        function i(A, B, z) {
//            var y = new Date(A, B, z, 0, 0, 0, 0);
//            var C = y.getDay();
//            if (C == 0) {
//                C = 6
//            } else {
//                C--
//            }
//            return C
//        }
//
//        function o(z, A) {
//            var y = 28;
//            while (v(z, A + 1, y + 1)) {
//                y++
//            }
//            return y
//        }
//
//        function t(A, C) {
//            var y = o(A, C);
//            var E = i(A, C, 1);
//            var B = i(A, C, y);
//            var D = y;
//            var z = (E - B);
//            if (z > 0) {
//                D += z
//            }
//            return Math.ceil(D / 7)
//        }
//
//        function v(B, z, A) {
//            return z > 0 && z < 13 && B > 0 && B < 32768 && A > 0 && A <= (new Date(B, z, 0)).getDate()
//        }
//
//        function p(A, C) {
//            if (A === false) {
//                A = 0
//            }
//            var B = j.data("currDate");
//            var z = j.data("initDate");
//            var y;
//            y = (z.getFullYear() - B.getFullYear()) * 12;
//            y -= B.getMonth() + 1;
//            y += z.getMonth();
//            if (C === true) {
//                if (y < (parseInt(A) - 1)) {
//                    return true
//                }
//            } else {
//                if (y >= (0 - parseInt(A))) {
//                    return true
//                }
//            }
//            return false
//        }
//    });
//    return this
//};
//$.fn.zabuto_calendar_defaults = function() {
//    var a = new Date();
//    var c = a.getFullYear();
//    var e = a.getMonth() + 1;
//    var b = {
//        language: false,
//        year: c,
//        month: e,
//        show_previous: true,
//        show_next: true,
//        cell_border: false,
//        today: false,
//        show_days: true,
//        weekstartson: 1,
//        nav_icon: false,
//        data: false,
//        ajax: false,
//        legend: false,
//        action: false,
//        action_nav: false
//    };
//    return b
//};
//$.fn.zabuto_calendar_language = function(a) {
//    if (typeof(a) == "undefined" || a === false) {
//        a = "en"
//    }
//    switch (a.toLowerCase()) {
//        case "de":
//            return {
//                month_labels: ["Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember"],
//                dow_labels: ["Mo", "Di", "Mi", "Do", "Fr", "Sa", "So"]
//            };
//            break;
//        case "en":
//            return {
//                month_labels: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
//                dow_labels: ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]
//            };
//            break;
//        case 'ar':
//            return {
//                month_labels: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر"],
//                dow_labels: ["أثنين", "ثلاثاء", "اربعاء", "خميس", "جمعه", "سبت", "أحد"]
//            };
//            break;
//        case "es":
//            return {
//                month_labels: ["Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"],
//                dow_labels: ["Lu", "Ma", "Mi", "Ju", "Vi", "Sá", "Do"]
//            };
//            break;
//        case "fr":
//            return {
//                month_labels: ["Janvier", "Février", "Mars", "Avril", "Mai", "Juin", "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Décembre"],
//                dow_labels: ["Lun", "Mar", "Mer", "Jeu", "Ven", "Sam", "Dim"]
//            };
//            break;
//        case "it":
//            return {
//                month_labels: ["Gennaio", "Febbraio", "Marzo", "Aprile", "Maggio", "Giugno", "Luglio", "Agosto", "Settembre", "Ottobre", "Novembre", "Dicembre"],
//                dow_labels: ["Lun", "Mar", "Mer", "Gio", "Ven", "Sab", "Dom"]
//            };
//            break;
//        case "nl":
//            return {
//                month_labels: ["Januari", "Februari", "Maart", "April", "Mei", "Juni", "Juli", "Augustus", "September", "Oktober", "November", "December"],
//                dow_labels: ["Ma", "Di", "Wo", "Do", "Vr", "Za", "Zo"]
//            };
//            break;
//        case "pt":
//            return {
//                month_labels: ["Janeiro", "Fevereiro", "Marco", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"],
//                dow_labels: ["S", "T", "Q", "Q", "S", "S", "D"]
//            };
//            break;
//        case "ru":
//            return {
//                month_labels: ["Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь"],
//                dow_labels: ["Пн", "Вт", "Ср", "Чт", "Пт", "Сб", "Вск"]
//            };
//            break;
//        case "se":
//            return {
//                month_labels: ["Januari", "Februari", "Mars", "April", "Maj", "Juni", "Juli", "Augusti", "September", "Oktober", "November", "December"],
//                dow_labels: ["Mån", "Tis", "Ons", "Tor", "Fre", "Lör", "Sön"]
//            };
//            break;
//        case "tr":
//            return {
//                month_labels: ["Ocak", "Şubat", "Mart", "Nisan", "Mayıs", "Haziran", "Temmuz", "Ağustos", "Eylül", "Ekim", "Kasım", "Aralık"],
//                dow_labels: ["Pts", "Salı", "Çar", "Per", "Cuma", "Cts", "Paz"]
//            };
//            break
//    }
//};

/**
 * Zabuto Calendar
 *
 * Dependencies
 * - jQuery (2.0.3)
 * - Twitter Bootstrap (3.0.2)
 */

if (typeof jQuery == 'undefined') {
    throw new Error('jQuery is not loaded');
}

/**
 * Create calendar
 *
 * @param options
 * @returns {*}
 */
$.fn.zabuto_calendar = function (options) {
    var opts = $.extend({}, $.fn.zabuto_calendar_defaults(), options);
    var languageSettings = $.fn.zabuto_calendar_language(opts.language);
    opts = $.extend({}, opts, languageSettings);

    this.each(function () {
        var $calendarElement = $(this);
        $calendarElement.attr('id', "zabuto_calendar_" + Math.floor(Math.random() * 99999).toString(36));

        $calendarElement.data('initYear', opts.year);
        $calendarElement.data('initMonth', opts.month);
        $calendarElement.data('monthLabels', opts.month_labels);
        $calendarElement.data('weekStartsOn', opts.weekstartson);
        $calendarElement.data('navIcons', opts.nav_icon);
        $calendarElement.data('dowLabels', opts.dow_labels);
        $calendarElement.data('showToday', opts.today);
        $calendarElement.data('showDays', opts.show_days);
        $calendarElement.data('showPrevious', opts.show_previous);
        $calendarElement.data('showNext', opts.show_next);
        $calendarElement.data('cellBorder', opts.cell_border);
        $calendarElement.data('jsonData', opts.data);
        $calendarElement.data('ajaxSettings', opts.ajax);
        $calendarElement.data('legendList', opts.legend);
        $calendarElement.data('actionFunction', opts.action);
        $calendarElement.data('actionNavFunction', opts.action_nav);

        drawCalendar();

        function drawCalendar() {
            var dateInitYear = parseInt($calendarElement.data('initYear'));
            var dateInitMonth = parseInt($calendarElement.data('initMonth')) - 1;
            var dateInitObj = new Date(dateInitYear, dateInitMonth, 1, 0, 0, 0, 0);
            $calendarElement.data('initDate', dateInitObj);

            var tableClassHtml = ($calendarElement.data('cellBorder') === true) ? ' table-bordered' : '';

            $tableObj = $('<table class="table' + tableClassHtml + '"></table>');
            $tableObj = drawTable($calendarElement, $tableObj, dateInitObj.getFullYear(), dateInitObj.getMonth());

            $legendObj = drawLegend($calendarElement);

            var $containerHtml = $('<div class="zabuto_calendar" id="' + $calendarElement.attr('id') + '"></div>');
            $containerHtml.append($tableObj);
            $containerHtml.append($legendObj);

            $calendarElement.append($containerHtml);

            var jsonData = $calendarElement.data('jsonData');
            if (false !== jsonData) {
                checkEvents($calendarElement, dateInitObj.getFullYear(), dateInitObj.getMonth());
            }
        }

        function drawTable($calendarElement, $tableObj, year, month) {
            var dateCurrObj = new Date(year, month, 1, 0, 0, 0, 0);
            $calendarElement.data('currDate', dateCurrObj);

            $tableObj.empty();
            $tableObj = appendMonthHeader($calendarElement, $tableObj, year, month);
            $tableObj = appendDayOfWeekHeader($calendarElement, $tableObj);
            $tableObj = appendDaysOfMonth($calendarElement, $tableObj, year, month);
            checkEvents($calendarElement, year, month);
            return $tableObj;
        }

        function drawLegend($calendarElement) {
            var $legendObj = $('<div class="legend" id="' + $calendarElement.attr('id') + '_legend"></div>');
            var legend = $calendarElement.data('legendList');
            if (typeof(legend) == 'object' && legend.length > 0) {
                $(legend).each(function (index, item) {
                    if (typeof(item) == 'object') {
                        if ('type' in item) {
                            var itemLabel = '';
                            if ('label' in item) {
                                itemLabel = item.label;
                            }

                            switch (item.type) {
                                case 'text':
                                    if (itemLabel !== '') {
                                        var itemBadge = '';
                                        if ('badge' in item) {
                                            if (typeof(item.classname) === 'undefined') {
                                                var badgeClassName = 'badge-event';
                                            } else {
                                                var badgeClassName = item.classname;
                                            }
                                            itemBadge = '<span class="badge ' + badgeClassName + '">' + item.badge + '</span> ';
                                        }
                                        $legendObj.append('<span class="legend-' + item.type + '">' + itemBadge + itemLabel + '</span>');
                                    }
                                    break;
                                case 'block':
                                    if (itemLabel !== '') {
                                        itemLabel = '<span>' + itemLabel + '</span>';
                                    }
                                    if (typeof(item.classname) === 'undefined') {
                                        var listClassName = 'event';
                                    } else {
                                        var listClassName = 'event-styled ' + item.classname;
                                    }
                                    $legendObj.append('<span class="legend-' + item.type + '"><ul class="legend"><li class="' + listClassName + '"></li></u>' + itemLabel + '</span>');
                                    break;
                                case 'list':
                                    if ('list' in item && typeof(item.list) == 'object' && item.list.length > 0) {
                                        var $legendUl = $('<ul class="legend"></u>');
                                        $(item.list).each(function (listIndex, listClassName) {
                                            $legendUl.append('<li class="' + listClassName + '"></li>');
                                        });
                                        $legendObj.append($legendUl);
                                    }
                                    break;
                                case 'spacer':
                                    $legendObj.append('<span class="legend-' + item.type + '"> </span>');
                                    break;

                            }
                        }
                    }
                });
            }

            return $legendObj;
        }

        function appendMonthHeader($calendarElement, $tableObj, year, month) {
            var navIcons = $calendarElement.data('navIcons');
            var $prevMonthNavIcon = $('<span><span class="glyphicon glyphicon-chevron-left"></span></span>');
            var $nextMonthNavIcon = $('<span><span class="glyphicon glyphicon-chevron-right"></span></span>');
            if (typeof(navIcons) === 'object') {
                if ('prev' in navIcons) {
                    $prevMonthNavIcon.html(navIcons.prev);
                }
                if ('next' in navIcons) {
                    $nextMonthNavIcon.html(navIcons.next);
                }
            }

            var prevIsValid = $calendarElement.data('showPrevious');
            if (typeof(prevIsValid) === 'number' || prevIsValid === false) {
                prevIsValid = checkMonthLimit($calendarElement.data('showPrevious'), true);
            }

            var $prevMonthNav = $('<div class="calendar-month-navigation"></div>');
            $prevMonthNav.attr('id', $calendarElement.attr('id') + '_nav-prev');
            $prevMonthNav.data('navigation', 'prev');
            if (prevIsValid !== false) {
                prevMonth = (month - 1);
                prevYear = year;
                if (prevMonth == -1) {
                    prevYear = (prevYear - 1);
                    prevMonth = 11;
                }
                $prevMonthNav.data('to', {year: prevYear, month: (prevMonth + 1)});
                $prevMonthNav.append($prevMonthNavIcon);
                if (typeof($calendarElement.data('actionNavFunction')) === 'function') {
                    $prevMonthNav.click($calendarElement.data('actionNavFunction'));
                }
                $prevMonthNav.click(function (e) {
                    drawTable($calendarElement, $tableObj, prevYear, prevMonth);
                });
            }

            var nextIsValid = $calendarElement.data('showNext');
            if (typeof(nextIsValid) === 'number' || nextIsValid === false) {
                nextIsValid = checkMonthLimit($calendarElement.data('showNext'), false);
            }

            var $nextMonthNav = $('<div class="calendar-month-navigation"></div>');
            $nextMonthNav.attr('id', $calendarElement.attr('id') + '_nav-next');
            $nextMonthNav.data('navigation', 'next');
            if (nextIsValid !== false) {
                nextMonth = (month + 1);
                nextYear = year;
                if (nextMonth == 12) {
                    nextYear = (nextYear + 1);
                    nextMonth = 0;
                }
                $nextMonthNav.data('to', {year: nextYear, month: (nextMonth + 1)});
                $nextMonthNav.append($nextMonthNavIcon);
                if (typeof($calendarElement.data('actionNavFunction')) === 'function') {
                    $nextMonthNav.click($calendarElement.data('actionNavFunction'));
                }
                $nextMonthNav.click(function (e) {
                    drawTable($calendarElement, $tableObj, nextYear, nextMonth);
                });
            }

            var monthLabels = $calendarElement.data('monthLabels');

            var $prevMonthCell = $('<th></th>').append($prevMonthNav);
            var $nextMonthCell = $('<th></th>').append($nextMonthNav);

            var $currMonthLabel = $('<span>' + monthLabels[month] + ' ' + year + '</span>');
            $currMonthLabel.dblclick(function () {
                var dateInitObj = $calendarElement.data('initDate');
                drawTable($calendarElement, $tableObj, dateInitObj.getFullYear(), dateInitObj.getMonth());
            });

            var $currMonthCell = $('<th colspan="5"></th>');
            $currMonthCell.append($currMonthLabel);

            var $monthHeaderRow = $('<tr class="calendar-month-header"></tr>');
            $monthHeaderRow.append($prevMonthCell, $currMonthCell, $nextMonthCell);

            $tableObj.append($monthHeaderRow);
            return $tableObj;
        }

        function appendDayOfWeekHeader($calendarElement, $tableObj) {
            if ($calendarElement.data('showDays') === true) {
                var weekStartsOn = $calendarElement.data('weekStartsOn');
                var dowLabels = $calendarElement.data('dowLabels');
                if (weekStartsOn === 0) {
                    var dowFull = $.extend([], dowLabels);
                    var sunArray = new Array(dowFull.pop());
                    dowLabels = sunArray.concat(dowFull);
                }

                var $dowHeaderRow = $('<tr class="calendar-dow-header"></tr>');
                $(dowLabels).each(function (index, value) {
                    $dowHeaderRow.append('<th>' + value + '</th>');
                });
                $tableObj.append($dowHeaderRow);
            }
            return $tableObj;
        }

        function appendDaysOfMonth($calendarElement, $tableObj, year, month) {
            var ajaxSettings = $calendarElement.data('ajaxSettings');
            var weeksInMonth = calcWeeksInMonth(year, month);
            var lastDayinMonth = calcLastDayInMonth(year, month);
            var firstDow = calcDayOfWeek(year, month, 1);
            var lastDow = calcDayOfWeek(year, month, lastDayinMonth);
            var currDayOfMonth = 1;

            var weekStartsOn = $calendarElement.data('weekStartsOn');
            if (weekStartsOn === 0) {
                if (lastDow == 6) {
                    weeksInMonth++;
                }
                if (firstDow == 6 && (lastDow == 0 || lastDow == 1 || lastDow == 5)) {
                    weeksInMonth--;
                }
                firstDow++;
                if (firstDow == 7) {
                    firstDow = 0;
                }
            }

            for (var wk = 0; wk < weeksInMonth; wk++) {
                var $dowRow = $('<tr class="calendar-dow"></tr>');
                for (var dow = 0; dow < 7; dow++) {
                    if (dow < firstDow || currDayOfMonth > lastDayinMonth) {
                        $dowRow.append('<td></td>');
                    } else {
                        var dateId = $calendarElement.attr('id') + '_' + dateAsString(year, month, currDayOfMonth);
                        var dayId = dateId + '_day';

                        var $dayElement = $('<div id="' + dayId + '" class="day" >' + currDayOfMonth + '</div>');
                        $dayElement.data('day', currDayOfMonth);

                        if ($calendarElement.data('showToday') === true) {
                            if (isToday(year, month, currDayOfMonth)) {
                                $dayElement.html('<span class="badge badge-today">' + currDayOfMonth + '</span>');
                            }
                        }

                        var $dowElement = $('<td id="' + dateId + '"></td>');
                        $dowElement.append($dayElement);

                        $dowElement.data('date', dateAsString(year, month, currDayOfMonth));
                        $dowElement.data('hasEvent', false);

                        if (typeof($calendarElement.data('actionFunction')) === 'function') {
                            $dowElement.addClass('dow-clickable');
                            $dowElement.click(function () {
                                $calendarElement.data('selectedDate', $(this).data('date'));
                            });
                            $dowElement.click($calendarElement.data('actionFunction'));
                        }

                        $dowRow.append($dowElement);

                        currDayOfMonth++;
                    }
                    if (dow == 6) {
                        firstDow = 0;
                    }
                }

                $tableObj.append($dowRow);
            }
            return $tableObj;
        }

        /* ----- Modal functions ----- */

        function createModal(id, title, body, footer) {
            var $modalHeaderButton = $('<button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>');
            var $modalHeaderTitle = $('<h4 class="modal-title" id="' + id + '_modal_title">' + title + '</h4>');

            var $modalHeader = $('<div class="modal-header"></div>');
            $modalHeader.append($modalHeaderButton);
            $modalHeader.append($modalHeaderTitle);

            var $modalBody = $('<div class="modal-body" id="' + id + '_modal_body">' + body + '</div>');

            var $modalFooter = $('<div class="modal-footer" id="' + id + '_modal_footer" style="background-color: rgb(239, 239, 239);"></div>');
            if (typeof(footer) !== 'undefined') {
                var $modalFooterAddOn = $('<div>' + footer + '</div>');
                $modalFooter.append($modalFooterAddOn);
            }

            var $modalContent = $('<div class="modal-content"></div>');
            $modalContent.append($modalHeader);
            $modalContent.append($modalBody);
            $modalContent.append($modalFooter);

            var $modalDialog = $('<div class="modal-dialog"></div>');
            $modalDialog.append($modalContent);

            var $modalFade = $('<div class="modal fade" id="' + id + '_modal" tabindex="-1" role="dialog" aria-labelledby="' + id + '_modal_title" aria-hidden="true"></div>');
            $modalFade.append($modalDialog);

            $modalFade.data('dateId', id);
            $modalFade.attr("dateId", id);

            return $modalFade;
        }

        /* ----- Event functions ----- */

        function checkEvents($calendarElement, year, month) {
            var jsonData = $calendarElement.data('jsonData');
            var ajaxSettings = $calendarElement.data('ajaxSettings');

            $calendarElement.data('events', false);

            if (false !== jsonData) {
                return jsonEvents($calendarElement);
            } else if (false !== ajaxSettings) {
                return ajaxEvents($calendarElement, year, month);
            }

            return true;
        }

        function jsonEvents($calendarElement) {
            var jsonData = $calendarElement.data('jsonData');
            $calendarElement.data('events', jsonData);
            drawEvents($calendarElement, 'json');
            return true;
        }

        function ajaxEvents($calendarElement, year, month) {
            var ajaxSettings = $calendarElement.data('ajaxSettings');

            if (typeof(ajaxSettings) != 'object' || typeof(ajaxSettings.url) == 'undefined') {
                alert('Invalid calendar event settings');
                return false;
            }

            var data = {year: year, month: (month + 1)};

            $.ajax({
                type: 'GET',
                url: ajaxSettings.url,
                data: data,
                dataType: 'json'
            }).done(function (response) {
                var events = [];
                $.each(response, function (k, v) {
                    events.push(response[k]);
                });
                $calendarElement.data('events', events);
                drawEvents($calendarElement, 'ajax');
            });

            return true;
        }

        function drawEvents($calendarElement, type) {
            var jsonData = $calendarElement.data('jsonData');
            var ajaxSettings = $calendarElement.data('ajaxSettings');

            var events = $calendarElement.data('events');
            if (events !== false) {
                $(events).each(function (index, value) {
                    var id = $calendarElement.attr('id') + '_' + value.date;
                    var $dowElement = $('#' + id);
                    var $dayElement = $('#' + id + '_day');

                    $dowElement.data('hasEvent', true);

                    if (typeof(value.title) !== 'undefined') {
                        $dowElement.attr('title', value.title);
                    }

                    if (typeof(value.classname) === 'undefined') {
                        $dowElement.addClass('event');
                    } else {
                        $dowElement.addClass('event-styled');
                        $dayElement.addClass(value.classname);
                    }

                    if (typeof(value.badge) !== 'undefined' && value.badge !== false) {
                        var badgeClass = (value.badge === true) ? '' : ' badge-' + value.badge;
                        var dayLabel = $dayElement.data('day');
                        $dayElement.html('<span class="btn btn-yellow btn-center ' + badgeClass + '" style="padding:0 !important; width: 31px !important;">' + dayLabel + '</span>');
                    }

                    if (typeof(value.body) !== 'undefined') {
                        var modalUse = false;
                        if (type === 'json' && typeof(value.modal) !== 'undefined' && value.modal === true) {
                            modalUse = true;
                        } else if (type === 'ajax' && 'modal' in ajaxSettings && ajaxSettings.modal === true) {
                            modalUse = true;
                        }

                        if (modalUse === true) {
                            $dowElement.addClass('event-clickable');

                            var $modalElement = createModal(id, value.title, value.body, value.footer);
                            $('body').append($modalElement);

                            $('#' + id).click(function () {
                                $('#' + id + '_modal').modal();
                            });
                        }
                    }
                });
            }
        }

        /* ----- Helper functions ----- */

        function isToday(year, month, day) {
            var todayObj = new Date();
            var dateObj = new Date(year, month, day);
            return (dateObj.toDateString() == todayObj.toDateString());
        }

        function dateAsString(year, month, day) {
            d = (day < 10) ? '0' + day : day;
            m = month + 1;
            m = (m < 10) ? '0' + m : m;
            return year + '-' + m + '-' + d;
        }

        function calcDayOfWeek(year, month, day) {
            var dateObj = new Date(year, month, day, 0, 0, 0, 0);
            var dow = dateObj.getDay();
            if (dow == 0) {
                dow = 6;
            } else {
                dow--;
            }
            return dow;
        }

        function calcLastDayInMonth(year, month) {
            var day = 28;
            while (checkValidDate(year, month + 1, day + 1)) {
                day++;
            }
            return day;
        }

        function calcWeeksInMonth(year, month) {
            var daysInMonth = calcLastDayInMonth(year, month);
            var firstDow = calcDayOfWeek(year, month, 1);
            var lastDow = calcDayOfWeek(year, month, daysInMonth);
            var days = daysInMonth;
            var correct = (firstDow - lastDow);
            if (correct > 0) {
                days += correct;
            }
            return Math.ceil(days / 7);
        }

        function checkValidDate(y, m, d) {
            return m > 0 && m < 13 && y > 0 && y < 32768 && d > 0 && d <= (new Date(y, m, 0)).getDate();
        }

        function checkMonthLimit(count, invert) {
            if (count === false) {
                count = 0;
            }
            var d1 = $calendarElement.data('currDate');
            var d2 = $calendarElement.data('initDate');

            var months;
            months = (d2.getFullYear() - d1.getFullYear()) * 12;
            months -= d1.getMonth() + 1;
            months += d2.getMonth();

            if (invert === true) {
                if (months < (parseInt(count) - 1)) {
                    return true;
                }
            } else {
                if (months >= (0 - parseInt(count))) {
                    return true;
                }
            }
            return false;
        }
    }); // each()

    return this;
};

/**
 * Default settings
 *
 * @returns object
 *   language:          string,
 *   year:              integer,
 *   month:             integer,
 *   show_previous:     boolean|integer,
 *   show_next:         boolean|integer,
 *   cell_border:       boolean,
 *   today:             boolean,
 *   show_days:         boolean,
 *   weekstartson:      integer (0 = Sunday, 1 = Monday),
 *   nav_icon:          object: prev: string, next: string
 *   ajax:              object: url: string, modal: boolean,
 *   legend:            object array, [{type: string, label: string, classname: string}]
 *   action:            function
 *   action_nav:        function
 */
$.fn.zabuto_calendar_defaults = function () {
    var now = new Date();
    var year = now.getFullYear();
    var month = now.getMonth() + 1;
    var settings = {
        language: false,
        year: year,
        month: month,
        show_previous: true,
        show_next: true,
        cell_border: false,
        today: false,
        show_days: true,
        weekstartson: 1,
        nav_icon: false,
        data: false,
        ajax: false,
        legend: false,
        action: false,
        action_nav: false
    };
    return settings;
};

/**
 * Language settings
 *
 * @param lang
 * @returns {{month_labels: Array, dow_labels: Array}}
 */
$.fn.zabuto_calendar_language = function (lang) {
    if (typeof(lang) == 'undefined' || lang === false) {
        lang = 'en';
    }

    switch (lang.toLowerCase()) {
        case 'de':
            return {
                month_labels: ["Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember"],
                dow_labels: ["Mo", "Di", "Mi", "Do", "Fr", "Sa", "So"]
            };
            break;

        case 'en':
            return {
                month_labels: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
                dow_labels: ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]
            };
            break;

        case 'ar':
            return {
                month_labels: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر"],
                dow_labels: ["أثنين", "ثلاثاء", "اربعاء", "خميس", "جمعه", "سبت", "أحد"]
            };
            break;

        case 'es':
            return {
                month_labels: ["Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"],
                dow_labels: ["Lu", "Ma", "Mi", "Ju", "Vi", "Sá", "Do"]
            };
            break;

        case 'fr':
            return {
                month_labels: ["Janvier", "Février", "Mars", "Avril", "Mai", "Juin", "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Décembre"],
                dow_labels: ["Lun", "Mar", "Mer", "Jeu", "Ven", "Sam", "Dim"]
            };
            break;

        case 'it':
            return {
                month_labels: ["Gennaio", "Febbraio", "Marzo", "Aprile", "Maggio", "Giugno", "Luglio", "Agosto", "Settembre", "Ottobre", "Novembre", "Dicembre"],
                dow_labels: ["Lun", "Mar", "Mer", "Gio", "Ven", "Sab", "Dom"]
            };
            break;

        case 'nl':
            return {
                month_labels: ["Januari", "Februari", "Maart", "April", "Mei", "Juni", "Juli", "Augustus", "September", "Oktober", "November", "December"],
                dow_labels: ["Ma", "Di", "Wo", "Do", "Vr", "Za", "Zo"]
            };
            break;

        case 'pt':
            return {
                month_labels: ["Janeiro", "Fevereiro", "Marco", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"],
                dow_labels: ["S", "T", "Q", "Q", "S", "S", "D"]
            };
            break;

        case 'ru':
            return {
                month_labels: ["Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь"],
                dow_labels: ["Пн", "Вт", "Ср", "Чт", "Пт", "Сб", "Вск"]
            };
            break;

        case 'se':
            return {
                month_labels: ["Januari", "Februari", "Mars", "April", "Maj", "Juni", "Juli", "Augusti", "September", "Oktober", "November", "December"],
                dow_labels: ["Mån", "Tis", "Ons", "Tor", "Fre", "Lör", "Sön"]
            };
            break;

        case 'tr':
            return {
                month_labels: ["Ocak", "Şubat", "Mart", "Nisan", "Mayıs", "Haziran", "Temmuz", "Ağustos", "Eylül", "Ekim", "Kasım", "Aralık"],
                dow_labels: ["Pts", "Salı", "Çar", "Per", "Cuma", "Cts", "Paz"]
            };
            break;
    }

};